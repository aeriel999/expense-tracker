// ‚¨áÔ∏è –Ü–º–ø–æ—Ä—Ç–∏ –º–æ–¥—É–ª—ñ–≤ (–ø—Ä–∞—Ü—é—î –ª–∏—à–µ —è–∫—â–æ <script type="module"> —É index.html)
import { fetchCategories } from "./features/categories/categoriesService.js"; // ‚úÖ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑ API
import { renderCategory } from "./components/categoryComponent.js";           // ‚úÖ –±—É–¥—É—î DOM –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
import { createCategory } from "./models/categoryModels.js";                  // ‚úÖ –∞–¥–∞–ø—Ç–µ—Ä: —Å–∏—Ä—ñ API-–¥–∞–Ω—ñ -> –º–æ–¥–µ–ª—å –¥–ª—è UI
import { addExpense } from "./features/expenses/expensesService.js";         // API: —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏
import { createExpense } from "./models/expenseModels.js";                  // –ú–æ–¥–µ–ª—å –≤–∏—Ç—Ä–∞—Ç–∏: –ø—Ä–∏–≤–æ–¥–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å POST /api/expenses –¥–æ —î–¥–∏–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É

// ‚¨áÔ∏è –ë–∞–∑–æ–≤–∏–π URL –¥–ª—è —ñ–∫–æ–Ω–æ–∫/–∑–æ–±—Ä–∞–∂–µ–Ω—å —ñ–∑ preload (—á–µ—Ä–µ–∑ contextBridge)
const IMAGE_URL = await window.electronAPI.getImageBaseUrl();

// --------- Redux —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è: –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä–µ–Ω–¥–µ—Ä —ñ –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–º—ñ–Ω–∏ ---------

// 1) –°—Ç–∞—Ä—Ç–æ–≤–µ —á–∏—Ç–∞–Ω–Ω—è —Å—Ç–µ–π—Ç—É –∑ main-–ø—Ä–æ—Ü–µ—Å—É —ñ –ø–µ—Ä—à–∏–π —Ä–µ–Ω–¥–µ—Ä
window.electronAPI.getState().then((state) => {
  renderCategories(state);
});

// 2) –ë—É–¥—å-—è–∫–∞ –∑–º—ñ–Ω–∞ Redux-—Å—Ç–∞–Ω—É ‚Üí –ø–æ–≤—Ç–æ—Ä–Ω–∏–π —Ä–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
window.electronAPI.onStateChange((state) => renderCategories(state));

// 3) –ü—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑ API –∫–ª–∞–¥–µ–º–æ —ó—Ö —É Redux (SET_CATEGORIES)
fetchCategories().then((categories) =>
  window.electronAPI.dispatch({ type: "SET_CATEGORIES", payload: categories })
);

// --------- –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π ---------

/**
 * –ü–µ—Ä–µ–º–∞–ª—å–æ–≤—É—î —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ #category-list.
 * @param {object} state ‚Äî –ø–æ—Ç–æ—á–Ω–∏–π Redux-—Å—Ç–∞–Ω –∑ preload/main.
 */
async function renderCategories(state) {
  const container = document.getElementById("category-list");
  if (!container) return;

  // –æ—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–º—ñ—Å—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤–Ω–∏–º –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–º
  container.innerHTML = "";

  // –ë–ï–ö .NET —ñ–Ω–∫–æ–ª–∏ –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤–∏ —É –≤–∏–≥–ª—è–¥—ñ { $values: [...] } ‚Üí –¥—ñ—Å—Ç–∞—î–º–æ —ó—Ö –±–µ–∑–ø–µ—á–Ω–æ
  const categories = (state.categories?.$values || []).map(createCategory);

  // –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –±—É–¥—É—î–º–æ DOM-–µ–ª–µ–º–µ–Ω—Ç —ñ –¥–æ–¥–∞—î–º–æ —É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  categories.forEach((cat) => {
    const el = renderCategory(cat, IMAGE_URL); // renderCategory –º–∞—î —Å—Ç–≤–æ—Ä–∏—Ç–∏ .category-row –∑ —É—Å—ñ–º–∞ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏
    container.appendChild(el);
  });
}

// --------- –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏ (–∫–ª—ñ–∫ –Ω–∞ ¬´+¬ª) ---------

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ —Å—É–º–∏ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–æ–º–∏ –∞–±–æ –∫—Ä–∞–ø–∫–∏ —è–∫ –¥–µ—Å—è—Ç–∫–æ–≤–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∞.
 * –ü–æ–≤–µ—Ä—Ç–∞—î —á–∏—Å–ª–æ –∞–±–æ NaN.
 */
function parseAmount(v) {
  const n = Number(String(v ?? "").trim().replace(",", "."));
  return Number.isFinite(n) ? n : NaN;
}

// –î–µ–ª–µ–≥–æ–≤–∞–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –Ω–∞ –≤–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç:
// –≤—ñ–¥–ø—Ä–∞—Ü—å–æ–≤—É—î —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∫–ª—ñ–∫—ñ–≤ –ø–æ –∫–Ω–æ–ø—Ü—ñ –∑ –∫–ª–∞—Å–æ–º .add-expense
document.addEventListener("click", async (e) => {
  const btn = e.target.closest(".add-expense");
  if (!btn) return;

  const row = btn.closest(".category");                 // üëà –≤–∏–ø—Ä–∞–≤–∏–ª–∏
  if (!row) { console.warn("[add-expense] row null"); return; }

  const select = row.querySelector(".category-items");  // <select> –∑ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
  const amountInput = row.querySelector(".amount-input");

  const categoryItemId = select?.value?.trim();
  const amount = parseAmount(amountInput?.value);

  if (!categoryItemId) { alert("–í–∏–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é"); return; }
  if (!Number.isFinite(amount) || amount <= 0) { alert("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—É–º–∞"); return; }

  btn.disabled = true;
  try {
    const raw = await addExpense({ categoryItemId, amount }); // —Å–µ—Ä–≤—ñ—Å
    console.log("raw", raw)

    const expense = createExpense(raw);                       // –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –º–æ–¥–µ–ª—å
    window.electronAPI.dispatch({ type: "ADD_EXPENSE_SUCCESS", payload: expense });
    amountInput.value = "";
  } catch (err) {
    console.error(err);
    alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É.");
  } finally {
    btn.disabled = false;
  }
});

