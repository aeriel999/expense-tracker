// <auto-generated />
using System;
using ExpenseTracker.Infrastructure.Common.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExpenseTracker.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250905104720_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("ExpenseTracker.Core.Expenses.Current.CategoryExpense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ExpenseTracker.Core.Expenses.Current.CategoryExpenseItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryItems");
                });

            modelBuilder.Entity("ExpenseTracker.Core.Expenses.Current.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CategoryItemId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryItemId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("ExpenseTracker.Core.Incomes.Current.CategoryIncome", b =>
                {
                    b.Property<Guid>("CategoryIncomeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryIncomeDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryIncomeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IconName")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryIncomeId");

                    b.ToTable("CategoryIncomes");
                });

            modelBuilder.Entity("ExpenseTracker.Core.Incomes.Current.Income", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CategoryIncomeId")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateOnly")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryIncomeId");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("ExpenseTracker.Core.Expenses.Current.CategoryExpenseItem", b =>
                {
                    b.HasOne("ExpenseTracker.Core.Expenses.Current.CategoryExpense", "Category")
                        .WithMany("CategoryItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ExpenseTracker.Core.Expenses.Current.Expense", b =>
                {
                    b.HasOne("ExpenseTracker.Core.Expenses.Current.CategoryExpenseItem", "CategoryItem")
                        .WithMany("Expenses")
                        .HasForeignKey("CategoryItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CategoryItem");
                });

            modelBuilder.Entity("ExpenseTracker.Core.Incomes.Current.Income", b =>
                {
                    b.HasOne("ExpenseTracker.Core.Incomes.Current.CategoryIncome", "CategoryIncome")
                        .WithMany("Incomes")
                        .HasForeignKey("CategoryIncomeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CategoryIncome");
                });

            modelBuilder.Entity("ExpenseTracker.Core.Expenses.Current.CategoryExpense", b =>
                {
                    b.Navigation("CategoryItems");
                });

            modelBuilder.Entity("ExpenseTracker.Core.Expenses.Current.CategoryExpenseItem", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("ExpenseTracker.Core.Incomes.Current.CategoryIncome", b =>
                {
                    b.Navigation("Incomes");
                });
#pragma warning restore 612, 618
        }
    }
}
